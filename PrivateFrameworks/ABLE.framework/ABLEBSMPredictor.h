/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/ABLE.framework/ABLE
 */

@interface ABLEBSMPredictor : NSObject {
    NSMutableArray * ableChargePredictions;
    ABLECoreData * ableCoreData;
    double  ableDrain;
    NSDate * ableNextChargeDate;
    NSArray * ablePrediction;
    NSDate * ablePredictionDate;
    double  ableZero;
    NSDate * ableZeroDate;
    bool  autoNotifyEnabled;
    int  autoNotifyToken;
    bool  bsmDisplayed;
    bool  bsmEnabled;
    bool  bsmThrown;
    int  bsmToken;
    NSObject<OS_dispatch_queue> * cdQueue;
    CDSession * cdSession;
    long long  consecutiveDenies;
    NSLocale * currLocale;
    NSUserDefaults * defaults;
    bool  ekEnabled;
    NSDate * firstDetect;
    bool  haveBatteryAndPluginData;
    NSMutableArray * histChargePredictions;
    bool  isInternal;
    bool  isTraveling;
    NSDate * lastBSMDisableDate;
    NSDate * lastDeniedDate;
    NSDate * lastInfoNoteShown;
    NSDate * lastReportedDate;
    NSDate * lastRun;
    NSDate * lastThrown;
    int  lockstateToken;
    ABLEBSMPluginMonitor * pluginMonitor;
    NSDate * predNextChargeDate;
    NSDate * predNextZeroDate;
    NSMutableArray * predictedZeroDates;
    NSDictionary * predictionConfig;
    NSDate * previousRun;
    double  projDrain;
    NSDate * projNextChargeDate;
    double  projZero;
    NSDate * projZeroDate;
    NSMutableArray * projectedZeroDates;
    ABLEBSMRoutineMonitor * routineMonitor;
    NSObject<OS_dispatch_source> * statTimer;
    NSObject<OS_dispatch_queue> * syncQueue;
    NSObject<OS_dispatch_source> * timer;
    NSObject<OS_dispatch_queue> * timerQueue;
}

+ (bool)isSupported;
+ (id)sharedInstanceWithSession:(id)arg1;

- (void).cxx_destruct;
- (bool)bsmEnabledAfterDate:(id)arg1;
- (void)dealloc;
- (void)displayNotificationRaw:(bool)arg1;
- (double)drainRateMultiplierWithLevel:(double)arg1 predictedLevel:(double)arg2;
- (void)handleAutoNotifySettingChanged;
- (void)handleUserResponse:(unsigned long long)arg1;
- (void)incrementFalsePositivesForPredictions:(id)arg1 withTruth:(id)arg2 withKey:(id)arg3;
- (id)initWithSession:(id)arg1;
- (id)initializeArrayWithKey:(id)arg1;
- (void)initializeValues;
- (bool)isInternalBuild;
- (double)leewayAdjustmentForDate:(id)arg1;
- (double)leewayAdjustmentForEventsAt:(id)arg1;
- (double)leewayAdjustmentForTravel;
- (id)loadPredictionsForKey:(id)arg1;
- (id)predictedChargeDateAfterDate:(id)arg1 withPrediction:(id)arg2 atTime:(id)arg3 withCharge:(double)arg4;
- (id)predictedZeroDateAfterDate:(id)arg1 charge:(double)arg2 prediction:(id)arg3 atTime:(id)arg4 nextCharge:(id)arg5;
- (id)predictionFromString:(id)arg1;
- (id)predictionToString:(id)arg1;
- (void)recordPredictedKeyEventsOnDate:(id)arg1 charge:(double)arg2;
- (void)recordPrediction:(id)arg1 predDate:(id)arg2;
- (void)recordPredictionsforABLECharge:(id)arg1 forHistCharge:(id)arg2 forPredZero:(id)arg3 forProjZero:(id)arg4;
- (void)registerForUnlockNotification:(bool)arg1;
- (void)reportStatsRaw;
- (void)resetBSMValuesIfApplicable;
- (void)saveDate:(id)arg1 forKey:(id)arg2;
- (bool)shouldConsiderBSMWithCharge:(double)arg1;
- (bool)shouldDisplayBSMNotificationWithDate:(id)arg1 charge:(double)arg2 chargeDate:(id)arg3 zeroDate:(id)arg4;
- (void)start;
- (void)triggerNotificationIfNecessary;
- (bool)updateABLEPrediction:(id)arg1;
- (bool)updateABLEPredictionDate:(id)arg1;
- (void)updateArray:(id)arg1 forKey:(id)arg2;
- (void)updateConfiguration;
- (bool)updateConsecutiveDenies:(long long)arg1;
- (bool)updateFirstDetect:(id)arg1;
- (bool)updateLastDeniedDate:(id)arg1;
- (bool)updateLastReportedDate:(id)arg1;
- (bool)updateLastRun:(id)arg1;
- (bool)updateLastThrown:(id)arg1;
- (bool)updateNextChargeDate:(id)arg1;
- (bool)updateNextZeroDate:(id)arg1;
- (bool)updateNotificationDisplayed:(bool)arg1;
- (void)updatePredictionArray:(id)arg1 forKey:(id)arg2;
- (id)zeroDateFromABLEPredictionAfterDate:(id)arg1 charge:(double)arg2 prediction:(id)arg3 atTime:(id)arg4 nextCharge:(id)arg5;
- (id)zeroDateFromDrainAfterDate:(id)arg1 charge:(double)arg2;

@end
