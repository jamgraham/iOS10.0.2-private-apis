/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/AppleCVA.framework/AppleCVA
 */

@interface VideoMattingMetal : NSObject {
    <MTLTexture> * _aCoeffTexture;
    <MTLComputePipelineState> * _alphaFillKernel;
    <MTLTexture> * _alphaLut;
    <MTLTexture> * _alphaTexture;
    <MTLBuffer> * _bBuf;
    <MTLTexture> * _bCoeffTexture;
    <MTLTexture> * _bTexture;
    <MTLTexture> * _bg;
    <MTLTexture> * _blurredBg;
    <MTLTexture> * _blurredBgX;
    <MTLTexture> * _boxIntermediateTexture;
    <MTLComputePipelineState> * _box_half4_pass_horiz_kernel;
    <MTLComputePipelineState> * _box_half4_pass_vert_kernel;
    <MTLComputePipelineState> * _box_half_pass_horiz_kernel;
    <MTLComputePipelineState> * _box_half_pass_vert_kernel;
    <MTLComputePipelineState> * _box_norm_half4_pass_vert_kernel;
    <MTLComputePipelineState> * _box_norm_half_pass_vert_kernel;
    <MTLTexture> * _coc;
    <MTLTexture> * _coeffHistory;
    <MTLCommandQueue> * _commandQueue;
    <MTLTexture> * _convolutedCoeff;
    <MTLComputePipelineState> * _convolutionKernel;
    <MTLComputePipelineState> * _convolution_1Plane_Kernel;
    <MTLComputePipelineState> * _cubicUpsampleKernel;
    <MTLTexture> * _d1;
    <MTLTexture> * _d2;
    <MTLTexture> * _d3;
    <MTLTexture> * _d4;
    <MTLTexture> * _d5;
    <MTLTexture> * _d6;
    <MTLLibrary> * _defaultLibrary;
    <MTLDeviceSPI> * _device;
    <MTLTexture> * _deweightedShift;
    <MTLComputePipelineState> * _distanceTransformHorizontalKernel;
    <MTLComputePipelineState> * _distanceTransformHorizontalWithWeightKernel;
    <MTLComputePipelineState> * _distanceTransformVerticalKernel;
    <MTLComputePipelineState> * _distanceTransformVerticalWithForegroundMaskKernel;
    <MTLComputePipelineState> * _doubleUpsampler;
    <MTLComputePipelineState> * _doubleUpsamplerOneComponent;
    <MTLComputePipelineState> * _down2Kernel;
    <MTLTexture> * _fg;
    MPSImageBox * _fgBlurBoxKernel;
    <MTLTexture> * _fgBlurred;
    <MTLTexture> * _filteredAlphaTexture;
    unsigned long long  _frameIndex;
    <MTLTexture> * _fullResCoC;
    <MTLBuffer> * _gBuf;
    <MTLTexture> * _gCoeffTexture;
    <MTLTexture> * _gTexture;
    MPSImageBox * _gfBoxKernel;
    <MTLTexture> * _gfGGGBBB;
    <MTLTexture> * _gfGuide;
    <MTLTexture> * _gfMeanGGGBBB;
    <MTLTexture> * _gfMeanNormalizationFactor;
    <MTLTexture> * _gfMeanRRRGRB;
    <MTLTexture> * _gfMeanSrcGuide;
    <MTLTexture> * _gfMeanSrcWithGuide;
    <MTLTexture> * _gfMeanWeight;
    <MTLTexture> * _gfRRRGRB;
    <MTLTexture> * _gfSrcGuide;
    <MTLTexture> * _gfSrcWithGuide;
    <MTLTexture> * _gfTmp;
    <MTLTexture> * _gfTmp2;
    <MTLTexture> * _gfWeight;
    <MTLTexture> * _gfWeightMulResult;
    <MTLComputePipelineState> * _grayKernel;
    <MTLComputePipelineState> * _guidedFilterApplyARGBKernel;
    <MTLComputePipelineState> * _guidedFilterApplyKernel;
    <MTLComputePipelineState> * _guidedFilterApplyRGBAKernel;
    <MTLComputePipelineState> * _guidedFilterCovarianceKernel;
    <MTLComputePipelineState> * _guidedFilterEmbedGuideKernel;
    <MTLComputePipelineState> * _guidedFilterInvertKernel;
    <MTLComputePipelineState> * _guidedFilterMultiplyKernel;
    <MTLComputePipelineState> * _guidedFilterPremultiplyKernel;
    <MTLComputePipelineState> * _guidedFilterRegressionKernel;
    <MTLComputePipelineState> * _guidedFilterSecondOrderProductsKernel;
    <MTLComputePipelineState> * _halfDownSampler;
    <MTLComputePipelineState> * _halfDownSamplerOneComponent;
    <MTLTexture> * _halfResCoC;
    struct __IOSurfaceAccelerator { } * _hwScaler;
    struct __CVBuffer { } * _hybridDownsamplingIntermediateBuffer;
    <MTLTexture> * _hybridDownsamplingIntermediateR32Texture;
    <MTLTexture> * _hybridDownsamplingIntermediateTexture;
    <MTLTexture> * _hybridUpscalingIntermediateR32Texture;
    <MTLTexture> * _hybridUpscalingIntermediateTexture;
    <MTLComputePipelineState> * _integralHorizontalKernel;
    <MTLComputePipelineState> * _integralHorizontal_1Plane_Kernel;
    <MTLTexture> * _integralIntermediateTexture;
    <MTLTexture> * _integralOutput;
    <MTLComputePipelineState> * _integralVerticalKernel;
    <MTLComputePipelineState> * _integralVertical_1Plane_Kernel;
    <MTLTexture> * _lowResMatte;
    <MTLComputePipelineState> * _maskedVariableBlurKernel;
    NSObject<OS_dispatch_semaphore> * _mattingCallbackSemaphore;
    struct __CVBuffer { } * _msrIntermediateBuffer;
    <MTLBuffer> * _noiseConfig;
    <MTLTexture> * _normInvNum;
    <MTLComputePipelineState> * _postProcessAlphaKernel;
    <MTLBuffer> * _rBuf;
    <MTLTexture> * _rCoeffTexture;
    <MTLTexture> * _rTexture;
    <MTLBuffer> * _regressionConfig;
    <MTLComputePipelineState> * _renderingAddNoiseKernel;
    NSObject<OS_dispatch_semaphore> * _renderingCallbackSemaphore;
    <MTLComputePipelineState> * _renderingCompositeAndFixupKernel_420f;
    <MTLComputePipelineState> * _renderingCompositeAndFixupKernel_argb;
    <MTLComputePipelineState> * _renderingCompositeAndFixupKernel_rgba;
    <MTLComputePipelineState> * _renderingCompositeFixUpAddNoiseKernel;
    <MTLComputePipelineState> * _renderingFgBgKernel_argb;
    <MTLComputePipelineState> * _renderingFgBgKernel_rgba;
    <MTLComputePipelineState> * _renderingFgMergeKernel;
    float  _renderingInvalidShiftFillValue;
    float  _renderingLensFocalLength_mm;
    float  _renderingShiftBlurRadius;
    <MTLComputePipelineState> * _renderingShiftDeweightKernel;
    <MTLComputePipelineState> * _renderingShiftFillAndFilterKernel;
    float  _renderingShiftUpdateRate;
    <MTLComputePipelineState> * _renderingVariableBlurXKernel;
    <MTLComputePipelineState> * _renderingVariableBlurYKernel;
    <MTLTexture> * _scaledGray;
    <MTLTexture> * _scaledSource;
    struct __CVBuffer {} * _scaledSourceCV;
    struct __sFILE { char *x1; int x2; int x3; short x4; short x5; struct __sbuf { char *x_6_1_1; int x_6_1_2; } x6; int x7; void *x8; int (*x9)(); int (*x10)(); int (*x11)(); int (*x12)(); struct __sbuf { char *x_13_1_1; int x_13_1_2; } x13; struct __sFILEX {} *x14; int x15; unsigned char x16[3]; unsigned char x17[1]; struct __sbuf { char *x_18_1_1; int x_18_1_2; } x18; int x19; long long x20; } * _scaledSourceFile;
    MPSImageLanczosScale * _scaler;
    NSObject<OS_dispatch_semaphore> * _semaphore;
    <MTLTexture> * _shift;
    MPSImageBox * _shiftBlurBoxKernel;
    <MTLBuffer> * _shiftConfig;
    <MTLComputePipelineState> * _shiftDecimateKernel;
    MPSImageGaussianBlur * _smoothFilter;
    <MTLTexture> * _smoothedAlphaTexture;
    <MTLTexture> * _srcTexture;
    NSObject<OS_dispatch_queue> * _synchronousMattingCallbackQueue;
    NSObject<OS_dispatch_queue> * _synchronousRenderingCallbackQueue;
    <MTLTexture> * _tempFloatR32FloatTexture;
    <MTLComputePipelineState> * _temporalCoefficientsFilterKernel;
    <MTLTexture> * _u1;
    <MTLTexture> * _u2;
    <MTLTexture> * _u3;
    <MTLTexture> * _u4;
    <MTLTexture> * _u5;
    <MTLTexture> * _u6;
    <MTLTexture> * _upscaledCoeff;
    <MTLBuffer> * _variableBlurConfig;
}

@property float renderingShiftUpdateRate;

- (void).cxx_destruct;
- (void)boxConvolve_1PlaneSource:(const struct ArrayView<float, 2> { struct ArraySlice<2> { unsigned long long x_1_1_1; struct Size<unsigned int, 2> { unsigned int x_2_2_1[2]; } x_1_1_2; struct Size<unsigned int, 2> { unsigned int x_3_2_1[2]; } x_1_1_3; } x1; float *x2; }*)arg1 destination:(struct ArrayView<float, 2> { struct ArraySlice<2> { unsigned long long x_1_1_1; struct Size<unsigned int, 2> { unsigned int x_2_2_1[2]; } x_1_1_2; struct Size<unsigned int, 2> { unsigned int x_3_2_1[2]; } x_1_1_3; } x1; float *x2; }*)arg2 kernelSize:(unsigned int)arg3;
- (struct __CVBuffer { }*)createCVBufferWithWidth:(unsigned long long)arg1 height:(unsigned long long)arg2 format:(unsigned int)arg3;
- (void)cropFrame:(const struct __CVBuffer { }*)arg1 destination:(struct __CVBuffer { }*)arg2 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)dealloc;
- (void)distanceTransformNonInitForeground:(struct Array<unsigned char, 2, 16> { struct ArraySlice<2> { unsigned long long x_1_1_1; struct Size<unsigned int, 2> { unsigned int x_2_2_1[2]; } x_1_1_2; struct Size<unsigned int, 2> { unsigned int x_3_2_1[2]; } x_1_1_3; } x1; char *x2; }*)arg1 distromInitForeground:(struct Array<float, 2, 16> { struct ArraySlice<2> { unsigned long long x_1_1_1; struct Size<unsigned int, 2> { unsigned int x_2_2_1[2]; } x_1_1_2; struct Size<unsigned int, 2> { unsigned int x_3_2_1[2]; } x_1_1_3; } x1; float *x2; }*)arg2;
- (void)downsampleWithHWScalerSource:(struct __CVBuffer { }*)arg1 destination:(struct __CVBuffer { }*)arg2;
- (void)dumpScaledSource:(struct __CVBuffer { }*)arg1;
- (void)encode420BilinearScalingToCommandBuffer:(id)arg1 source:(struct __CVBuffer { }*)arg2 destination:(struct __CVBuffer { }*)arg3;
- (void)encode420HybridDownsamplingToCommandBuffer:(id)arg1 source:(struct __CVBuffer { }*)arg2 destination:(struct __CVBuffer { }*)arg3;
- (void)encode420ScalingByMPSToCommandBuffer:(id)arg1 source:(struct __CVBuffer { }*)arg2 destination:(struct __CVBuffer { }*)arg3;
- (void)encodeBilinearScalingToCommandBuffer:(id)arg1 source:(id)arg2 destination:(id)arg3 mode:(long long)arg4;
- (void)encodeBoxConvolutionToCommandBuffer:(id)arg1 source:(id)arg2 destination:(id)arg3 kernelSize:(unsigned int)arg4;
- (void)encodeBoxFilterToBuffer:(id)arg1 sourceCoeff:(id)arg2 destinationCoeff:(id)arg3 radius:(int)arg4 normalize:(bool)arg5;
- (void)encodeBoxHorizontalToCommandBuffer:(id)arg1 configBuffer:(id)arg2 source:(id)arg3 destination:(id)arg4;
- (void)encodeBoxVerticalToCommandBuffer:(id)arg1 configBuffer:(id)arg2 source:(id)arg3 destination:(id)arg4 normalize:(bool)arg5;
- (void)encodeComputeForegroundMaskToCommandBuffer:(id)arg1 fgMask:(struct __CVBuffer { }*)arg2 weight:(struct __CVBuffer { }*)arg3 filteredShift:(struct __CVBuffer { }*)arg4 shiftMin:(unsigned int)arg5 minDistToDeweight:(float)arg6 unconfidentWeight:(float)arg7;
- (void)encodeCreateGrayImageToCommandBuffer:(id)arg1 source:(id)arg2;
- (void)encodeCubicUpScaleToCommandBuffer:(id)arg1 source:(id)arg2 destination:(id)arg3;
- (void)encodeDistanceTransformToCommandBuffer:(id)arg1 source:(id)arg2 destination:(id)arg3;
- (void)encodeDown2ToCommandBuffer:(id)arg1 source:(id)arg2 destination:(id)arg3;
- (void)encodeFillAlphaToCommandBuffer:(id)arg1 alpha:(id)arg2;
- (void)encodeFilterApplyToBuffer:(id)arg1 coeff:(id)arg2 source:(id)arg3 destination:(id)arg4;
- (void)encodeFilterCoefficientToBuffer:(id)arg1 inputCoeff:(id)arg2 prevSource:(id)arg3 currSource:(id)arg4 prevCoeff:(id)arg5 outCoeff:(id)arg6 similarityScaleFactor:(float)arg7 updateRate:(float)arg8;
- (void)encodeForegroundMaskToBuffer:(id)arg1 filteredShift:(id)arg2 weight:(id)arg3 foregroundMask:(id)arg4 shiftMin:(unsigned int)arg5 minDistToDeweight:(float)arg6 unconfidentWeight:(float)arg7;
- (void)encodeGuidedFilterReconstructToCommandBuffer:(id)arg1 Source:(struct __CVBuffer { }*)arg2 Coeff:(struct __CVBuffer { }*)arg3 destination:(struct __CVBuffer { }*)arg4 kernelSize:(unsigned int)arg5 alphaMaxLaplacian:(float)arg6 similarityScaleFactor:(float)arg7 updateRate:(float)arg8;
- (void)encodeGuidedFilterWithGuideToCommandBuffer:(id)arg1 src:(struct __CVBuffer { }*)arg2 weight:(struct __CVBuffer { }*)arg3 radius:(unsigned int)arg4 epsilon:(double)arg5 dst:(struct __CVBuffer { }*)arg6;
- (void)encodeHybridDownsamplingToCommandBuffer:(id)arg1 source:(id)arg2 destination:(id)arg3;
- (void)encodeHybridUpSamplingToCommandBuffer:(id)arg1 source:(id)arg2 destination:(id)arg3;
- (void)encodeIntegralFilterToBuffer:(id)arg1 sourceCoeff:(id)arg2 destinationCoeff:(id)arg3;
- (void)encodeIntegralHorizontalFilter1PlaneToCommandBuffer:(id)arg1 source:(id)arg2 destination:(id)arg3;
- (void)encodeIntegralHorizontalFilterToCommandBuffer:(id)arg1 source:(id)arg2 destination:(id)arg3;
- (void)encodeIntegralImageBoxConvolveToBuffer:(id)arg1 source:(id)arg2 destination:(id)arg3 kernelSize:(unsigned int)arg4;
- (void)encodeIntegralVerticalFilterToCommandBuffer:(id)arg1 source:(id)arg2 destination:(id)arg3;
- (void)encodeMaskedVariableBlurToCommandBuffer:(id)arg1 source:(id)arg2 destination:(id)arg3 mask:(id)arg4 maxBlur:(float)arg5;
- (void)encodePostProcessAlphaToCommandBuffer:(id)arg1 source:(id)arg2 destination:(id)arg3 alphaMaxLaplacian:(float)arg4;
- (void)encodeScaleSourceToCommandBuffer:(id)arg1 source:(struct __CVBuffer { }*)arg2 targetWidth:(unsigned long long)arg3 targetHeight:(unsigned long long)arg4;
- (void)encodeShiftDecimateToCommandBuffer:(id)arg1 shiftIn:(struct ArrayView<unsigned char, 2> { struct ArraySlice<2> { unsigned long long x_1_1_1; struct Size<unsigned int, 2> { unsigned int x_2_2_1[2]; } x_1_1_2; struct Size<unsigned int, 2> { unsigned int x_3_2_1[2]; } x_1_1_3; } x1; char *x2; }*)arg2 shiftOut:(struct __CVBuffer { }*)arg3;
- (void)encodeSmoothAlphaToCommandBuffer:(id)arg1 alpha:(id)arg2;
- (float)getMaxCoCRadius:(float)arg1 withFocusAt:(float)arg2 withFNumber:(float)arg3 withXResolution:(float)arg4;
- (char *)graySource;
- (void)guidedFilterApply:(struct Array<float, 2, 16> { struct ArraySlice<2> { unsigned long long x_1_1_1; struct Size<unsigned int, 2> { unsigned int x_2_2_1[2]; } x_1_1_2; struct Size<unsigned int, 2> { unsigned int x_3_2_1[2]; } x_1_1_3; } x1; float *x2; }*)arg1 :(struct Array<float, 2, 16> { struct ArraySlice<2> { unsigned long long x_1_1_1; struct Size<unsigned int, 2> { unsigned int x_2_2_1[2]; } x_1_1_2; struct Size<unsigned int, 2> { unsigned int x_3_2_1[2]; } x_1_1_3; } x1; float *x2; }*)arg2 :(struct Array<float, 2, 16> { struct ArraySlice<2> { unsigned long long x_1_1_1; struct Size<unsigned int, 2> { unsigned int x_2_2_1[2]; } x_1_1_2; struct Size<unsigned int, 2> { unsigned int x_3_2_1[2]; } x_1_1_3; } x1; float *x2; }*)arg3 :(struct Array<float, 2, 16> { struct ArraySlice<2> { unsigned long long x_1_1_1; struct Size<unsigned int, 2> { unsigned int x_2_2_1[2]; } x_1_1_2; struct Size<unsigned int, 2> { unsigned int x_3_2_1[2]; } x_1_1_3; } x1; float *x2; }*)arg4 source:(struct __CVBuffer { }*)arg5 destination:(struct ArrayView<float, 2> { struct ArraySlice<2> { unsigned long long x_1_1_1; struct Size<unsigned int, 2> { unsigned int x_2_2_1[2]; } x_1_1_2; struct Size<unsigned int, 2> { unsigned int x_3_2_1[2]; } x_1_1_3; } x1; float *x2; }*)arg6;
- (void)guidedFilterInjectColor:(struct __CVBuffer { }*)arg1;
- (void)initCoeffTexture:(struct Array<float, 2, 16> { struct ArraySlice<2> { unsigned long long x_1_1_1; struct Size<unsigned int, 2> { unsigned int x_2_2_1[2]; } x_1_1_2; struct Size<unsigned int, 2> { unsigned int x_3_2_1[2]; } x_1_1_3; } x1; float *x2; }*)arg1 :(struct Array<float, 2, 16> { struct ArraySlice<2> { unsigned long long x_1_1_1; struct Size<unsigned int, 2> { unsigned int x_2_2_1[2]; } x_1_1_2; struct Size<unsigned int, 2> { unsigned int x_3_2_1[2]; } x_1_1_3; } x1; float *x2; }*)arg2 :(struct Array<float, 2, 16> { struct ArraySlice<2> { unsigned long long x_1_1_1; struct Size<unsigned int, 2> { unsigned int x_2_2_1[2]; } x_1_1_2; struct Size<unsigned int, 2> { unsigned int x_3_2_1[2]; } x_1_1_3; } x1; float *x2; }*)arg3 :(struct Array<float, 2, 16> { struct ArraySlice<2> { unsigned long long x_1_1_1; struct Size<unsigned int, 2> { unsigned int x_2_2_1[2]; } x_1_1_2; struct Size<unsigned int, 2> { unsigned int x_3_2_1[2]; } x_1_1_3; } x1; float *x2; }*)arg4 to:(id*)arg5 :(id*)arg6 :(id*)arg7 :(id*)arg8;
- (void)initCoeffTextureARGB:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; })arg1 texture:(id*)arg2;
- (void)initGuidedFilterTexturesWithWidth:(unsigned int)arg1 height:(unsigned int)arg2;
- (void)initRenderingTexturesWithWidth:(unsigned long long)arg1 height:(unsigned long long)arg2 shiftWidth:(unsigned long long)arg3 shiftHeight:(unsigned long long)arg4;
- (void)initSourceTexture:(struct __CVBuffer { }*)arg1;
- (id)initWithMetalContext:(struct MetalContext { }*)arg1 renderingShiftUpdateRate:(float)arg2 renderingShiftBlurRadius:(float)arg3 renderingInvalidShiftFillValue:(float)arg4 renderingLensFocalLength_mm:(float)arg5;
- (void)reconstructAlpha:(struct __CVBuffer { }*)arg1 destination:(struct __CVBuffer { }*)arg2 alphaMaxLaplacian:(float)arg3 withCallback:(id /* block */)arg4;
- (void)renderContinuousWithSource:(const struct __CVBuffer { }*)arg1 alpha:(const struct __CVBuffer { }*)arg2 shift:(const struct __CVBuffer { }*)arg3 shiftCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 shiftAtInf:(float)arg5 minShiftInFocus:(float)arg6 rawFocusShift:(float)arg7 fNumber:(float)arg8 noiseBits:(float)arg9 shiftUpdateRate:(float)arg10 dstColor:(struct __CVBuffer { }*)arg11 withCallback:(id /* block */)arg12;
- (float)renderingShiftUpdateRate;
- (void)setAlphaLut:(float*)arg1;
- (void)setNormInvNum:(struct Array<float, 2, 16> { struct ArraySlice<2> { unsigned long long x_1_1_1; struct Size<unsigned int, 2> { unsigned int x_2_2_1[2]; } x_1_1_2; struct Size<unsigned int, 2> { unsigned int x_3_2_1[2]; } x_1_1_3; } x1; float *x2; }*)arg1;
- (void)setRenderingShiftUpdateRate:(float)arg1;
- (void)setupTexturesForMaskedVaribleBlurWithSource:(id)arg1;
- (void)updateWithShift:(struct ArrayView<unsigned char, 2> { struct ArraySlice<2> { unsigned long long x_1_1_1; struct Size<unsigned int, 2> { unsigned int x_2_2_1[2]; } x_1_1_2; struct Size<unsigned int, 2> { unsigned int x_3_2_1[2]; } x_1_1_3; } x1; char *x2; }*)arg1 filteredShift:(struct __CVBuffer { }*)arg2 source:(struct __CVBuffer { }*)arg3 coeff:(struct __CVBuffer { }*)arg4 alpha:(struct __CVBuffer { }*)arg5 fgMask:(struct __CVBuffer { }*)arg6 weight2:(struct __CVBuffer { }*)arg7 params:(struct { unsigned long long x1; unsigned long long x2; unsigned int x3; float x4; float x5; unsigned int x6; float x7; unsigned int x8; float x9; float x10; float x11; }*)arg8 callback:(id /* block */)arg9;
- (void)upsaleCoeffWithCPU:(struct Array<float, 2, 16> { struct ArraySlice<2> { unsigned long long x_1_1_1; struct Size<unsigned int, 2> { unsigned int x_2_2_1[2]; } x_1_1_2; struct Size<unsigned int, 2> { unsigned int x_3_2_1[2]; } x_1_1_3; } x1; float *x2; }*)arg1 :(struct Array<float, 2, 16> { struct ArraySlice<2> { unsigned long long x_1_1_1; struct Size<unsigned int, 2> { unsigned int x_2_2_1[2]; } x_1_1_2; struct Size<unsigned int, 2> { unsigned int x_3_2_1[2]; } x_1_1_3; } x1; float *x2; }*)arg2 :(struct Array<float, 2, 16> { struct ArraySlice<2> { unsigned long long x_1_1_1; struct Size<unsigned int, 2> { unsigned int x_2_2_1[2]; } x_1_1_2; struct Size<unsigned int, 2> { unsigned int x_3_2_1[2]; } x_1_1_3; } x1; float *x2; }*)arg3 :(struct Array<float, 2, 16> { struct ArraySlice<2> { unsigned long long x_1_1_1; struct Size<unsigned int, 2> { unsigned int x_2_2_1[2]; } x_1_1_2; struct Size<unsigned int, 2> { unsigned int x_3_2_1[2]; } x_1_1_3; } x1; float *x2; }*)arg4 destination:(id*)arg5 width:(unsigned long long)arg6 height:(unsigned long long)arg7;
- (void)upscaleCoeffWithMPS:(id)arg1 sourceCoeff:(struct Array<float, 2, 16> { struct ArraySlice<2> { unsigned long long x_1_1_1; struct Size<unsigned int, 2> { unsigned int x_2_2_1[2]; } x_1_1_2; struct Size<unsigned int, 2> { unsigned int x_3_2_1[2]; } x_1_1_3; } x1; float *x2; }*)arg2 :(struct Array<float, 2, 16> { struct ArraySlice<2> { unsigned long long x_1_1_1; struct Size<unsigned int, 2> { unsigned int x_2_2_1[2]; } x_1_1_2; struct Size<unsigned int, 2> { unsigned int x_3_2_1[2]; } x_1_1_3; } x1; float *x2; }*)arg3 :(struct Array<float, 2, 16> { struct ArraySlice<2> { unsigned long long x_1_1_1; struct Size<unsigned int, 2> { unsigned int x_2_2_1[2]; } x_1_1_2; struct Size<unsigned int, 2> { unsigned int x_3_2_1[2]; } x_1_1_3; } x1; float *x2; }*)arg4 :(struct Array<float, 2, 16> { struct ArraySlice<2> { unsigned long long x_1_1_1; struct Size<unsigned int, 2> { unsigned int x_2_2_1[2]; } x_1_1_2; struct Size<unsigned int, 2> { unsigned int x_3_2_1[2]; } x_1_1_3; } x1; float *x2; }*)arg5 scaledCoeff:(id*)arg6 :(id*)arg7 :(id*)arg8 :(id*)arg9 width:(unsigned long long)arg10 height:(unsigned long long)arg11;

@end
